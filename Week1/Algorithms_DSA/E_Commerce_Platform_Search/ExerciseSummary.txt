Exercise 2: E-commerce Platform Search Function

1. Explain Big O notation and how it helps in analyzing algorithms.

Big O notation describes the upper bound of an algorithm’s time or space complexity as the input size n grows.
It expresses the worst-case scenario, showing how quickly the resource usage increases.

 How it helps
 -It allows us to compare algorithms based on their efficiency.
 -It focuses on the part of the performance that matters most for large inputs.
 -It ignores machine-specific constants and details, so we can reason about scalability.

Example:
-If an algorithm runs in O(n²), its time will grow no faster than a constant multiple of n² as n gets large.

    | Big O     | Meaning              | Example                  |
    |-----------|--------------------- |------------------------  |
    | O(1)      | Constant time        | Accessing an array item  |
    | O(n)      | Linear time          | Looping through an array |
    | O(log n)  | Logarithmic time     | Binary search            |
    | O(n²)     | Quadratic time       | Nested loops             |


2. Compare the time complexity of linear and binary search algorithms.

Linear Search
Time Complexity (Worst case): O(n)

Binary Search
Time Complexity (Worst case): O(log n)


    | Algorithm      | Best Case | Average Case | Worst Case |
    |----------------|-----------|--------------|------------|
    | Linear Search  | O(1)      | O(n)         | O(n)       |
    | Binary Search  | O(1)      | O(log n)     | O(log n)   |


3. Most Suitable Algorithm

    For an E-commerce platform:

    - Binary Search is more suitable:
    - Product data (like IDs or names) can be sorted.
    - Offers faster searching in large product lists.
    - Efficient for platforms with many user queries.

    - Linear Search can still be useful when:
    - The product list is small.
    - The data is unsorted and frequently getting updated.